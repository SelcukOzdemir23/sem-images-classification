Found 8768 files belonging to 4 classes.
Using 5261 files for training.
Found 8768 files belonging to 4 classes.
Using 1753 files for validation.
Found 8768 files belonging to 4 classes.
Using 1753 files for validation.
<_PrefetchDataset element_spec=(TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 4), dtype=tf.float32, name=None))>
<_PrefetchDataset element_spec=(TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 4), dtype=tf.float32, name=None))>
<_PrefetchDataset element_spec=(TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 4), dtype=tf.float32, name=None))>
WARNING:tensorflow:From c:\Users\Ã–zdemir\AppData\Local\Programs\Python\Python311\Lib\site-packages\keras\src\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.
WARNING:tensorflow:From c:\Users\Ã–zdemir\AppData\Local\Programs\Python\Python311\Lib\site-packages\keras\src\layers\pooling\max_pooling2d.py:161: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.
Model: "sequential_2"
_________________________________________________________________
 Layer (type)                Output Shape              Param #
=================================================================
 sequential_1 (Sequential)   (None, 256, 256, 3)       0
 conv2d (Conv2D)             (None, 254, 254, 6)       168
 batch_normalization (Batch  (None, 254, 254, 6)       24
 Normalization)
 max_pooling2d (MaxPooling2  (None, 127, 127, 6)       0
 D)
 dropout (Dropout)           (None, 127, 127, 6)       0
 conv2d_1 (Conv2D)           (None, 125, 125, 16)      880
 batch_normalization_1 (Bat  (None, 125, 125, 16)      64
 chNormalization)
 max_pooling2d_1 (MaxPoolin  (None, 62, 62, 16)        0
 g2D)
 flatten (Flatten)           (None, 61504)             0
 dense (Dense)               (None, 1024)              62981120
 batch_normalization_2 (Bat  (None, 1024)              4096
 chNormalization)
 dropout_1 (Dropout)         (None, 1024)              0
 dense_1 (Dense)             (None, 128)               131200
 batch_normalization_3 (Bat  (None, 128)               512
 chNormalization)
 dense_2 (Dense)             (None, 4)                 516
=================================================================
Total params: 63118580 (240.78 MB)
Trainable params: 63116232 (240.77 MB)
Non-trainable params: 2348 (9.17 KB)
_________________________________________________________________
Model: "sequential_3"
_________________________________________________________________
 Layer (type)                Output Shape              Param #
=================================================================
 efficientnetb4 (Functional  (None, 8, 8, 1792)        17673823
 )
 global_average_pooling2d (  (None, 1792)              0
 GlobalAveragePooling2D)
 dense_3 (Dense)             (None, 1024)              1836032
 batch_normalization_4 (Bat  (None, 1024)              4096
 chNormalization)
 dense_4 (Dense)             (None, 128)               131200
 dense_5 (Dense)             (None, 4)                 516
=================================================================
Total params: 19645667 (74.94 MB)
Trainable params: 1969796 (7.51 MB)
Non-trainable params: 17675871 (67.43 MB)
_________________________________________________________________
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #
=================================================================
 input_4 (InputLayer)        [(None, 256, 256, 3)]     0
 efficientnetb4 (Functional  (None, 8, 8, 1792)        17673823
 )
 global_average_pooling2d_1  (None, 1792)              0
  (GlobalAveragePooling2D)
 dense_6 (Dense)             (None, 1024)              1836032
 batch_normalization_5 (Bat  (None, 1024)              4096
 chNormalization)
 dense_7 (Dense)             (None, 128)               131200
 dense_8 (Dense)             (None, 4)                 516
=================================================================
Total params: 19645667 (74.94 MB)
Trainable params: 1969796 (7.51 MB)
Non-trainable params: 17675871 (67.43 MB)
_________________________________________________________________
[34m[1mwandb[39m[22m: [33mWARNING[39m The save_model argument by default saves the model in the HDF5 format that cannot save custom objects like subclassed models and custom layers. This behavior will be deprecated in a future release in favor of the SavedModel format. Meanwhile, the HDF5 model is saved as W&B files and the SavedModel as W&B Artifacts.
Epoch 1/10
WARNING:tensorflow:From c:\Users\Ã–zdemir\AppData\Local\Programs\Python\Python311\Lib\site-packages\keras\src\utils\tf_utils.py:492: The name tf.ragged.RaggedTensorValue is deprecated. Please use tf.compat.v1.ragged.RaggedTensorValue instead.



































































































































































165/165 [==============================] - ETA: 0s - loss: 1.0467 - accuracy: 0.5670 - top_k_accuracy: 0.8690
c:\Users\Ã–zdemir\AppData\Local\Programs\Python\Python311\Lib\site-packages\keras\src\engine\training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.

165/165 [==============================] - ETA: 0s - loss: 1.0467 - accuracy: 0.5670 - top_k_accuracy: 0.8690INFO:tensorflow:Assets written to: b:\Dosya\Kodlar\Sem-Images-Classification\notebooks\wandb\run-20231129_101253-pg2zmy11\files\model-best\assets
INFO:tensorflow:Assets written to: b:\Dosya\Kodlar\Sem-Images-Classification\notebooks\wandb\run-20231129_101253-pg2zmy11\files\model-best\assets
